$(document).ready(function(){class e{constructor(){this.baseUrl="https://saras-bookable.herokuapp.com"}getUserInfo(){const e=parseInt($(".login_status")[0].dataset.current_user);return fetch(`${this.baseUrl}/users/${e}.json`).then(e=>e.json()).then(e=>new t(e))}markAsRead(e){return fetch(`${this.baseUrl}/books/${e}/mark_as_read.json`,{method:"PUT",headers:{"content-type":"application/json"}}).then(e=>console.log(e))}}class t{constructor(e){this.id=e.id,this.username=e.username,this.pagesRead=e.pages_read,this.readBooks=e.my_read_books,this.unreadBooks=e.my_unread_books}}class a{constructor(){this.adapter=new e,this.fetchAndLoadUsers(),this.listeners(),this.baseUrl="https://saras-bookable.herokuapp.com",this.currentUserId=parseInt($(".login_status")[0].dataset.current_user)}fetchAndLoadUsers(){this.adapter.getUserInfo().then(e=>{this.renderUserProfile(e)})}renderUserProfile(e){this.renderPagesRead(e),this.renderWantToReadTable(e),this.renderHaveReadTable(e)}renderPagesRead(e){const t=$("#page_count_container"),a=`<h3> ${e.pagesRead} pages read so far </h3>`;t.html(a)}renderWantToReadTr(e){const t=`<button type="button" class="mark_as_read" data-book_id="${e.id}">Mark as Read</button>`;return`<tr>\n      <td><a href="${this.baseUrl}/books/${e.id}">${e.title}</a></td>\n      <td><a href="${this.baseUrl}/authors/${e.author_id}">${e.author}</a></td>\n      <td><a href="${this.baseUrl}/genres/${e.genre_id}">${e.genre}</a></td>\n      <td>${e.page_count}</td>\n      <td>${t}</td>\n      </tr>`}renderWantToReadTable(e){const t=$("#want_to_read"),a="<th>Book</th> <th>Author</th> <th>Genre</th> <th>Page Count</th> <th> </th>",r=[];e.unreadBooks.forEach(function(e){r.push(this.renderWantToReadTr(e))}.bind(this));const s=r.join("");t.html(a),t.append(s)}renderHaveReadTr(e){let t,a;return t=""!=e.my_rating?e.my_rating:`<a href="${this.baseUrl}/books/${e.id}">(add rating)</a>`,a=null!=e.my_review?e.my_review.content:`<a href="${this.baseUrl}/books/${e.id}">(add review)</a>`,`<tr>\n      <td><a href="${this.baseUrl}/books/${e.id}">${e.title}</a></td>\n      <td><a href="${this.baseUrl}/authors/${e.author_id}">${e.author}</a></td>\n      <td><a href="${this.baseUrl}/genres/${e.genre_id}">${e.genre}</a></td>\n      <td>${e.page_count}</td>\n      <td>${t}</td>\n      <td>${a}</td> </tr>`}renderHaveReadTable(e){const t=$("#have_read"),a="<th>Book</th> <th>Author</th> <th>Genre</th> <th>Page Count</th><th> My Rating</th> <th>My Review</th>",r=[];e.readBooks.forEach(function(e){r.push(this.renderHaveReadTr(e))}.bind(this));const s=r.join("");t.html(a),t.append(s)}listeners(){$(document).on("click",".mark_as_read",this.markAsRead.bind(this))}markAsRead(e){e.preventDefault;parseInt($(".login_status")[0].dataset.current_user);const t=e.target.dataset.book_id;this.adapter.markAsRead(t),this.fetchAndLoadUsers()}}new a});