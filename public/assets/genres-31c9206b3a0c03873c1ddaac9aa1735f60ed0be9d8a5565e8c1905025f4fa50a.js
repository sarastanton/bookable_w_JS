$(document).ready(function(){class e{constructor(){this.baseUrl="http://localhost:3000/genres"}getGenres(){return fetch(`${this.baseUrl}.json`).then(e=>e.json())}getSpecificGenre(e){return fetch(`${window.location.href}.json`).then(e=>e.json())}createDBGenre(e){const t={name:e};return fetch(`${this.baseUrl}.json`,{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify({genre:t})}).then(e=>e.json())}updateDBGenre(e,t){const n={name:e};return fetch(`${this.baseUrl}/${t}`,{method:"PATCH",headers:{"content-type":"application/json"},body:JSON.stringify({genre:n})}).then(e=>e.json())}deleteDBGenre(e){return fetch(`${this.baseUrl}/${e}`,{method:"DELETE",headers:{"content-type":"application/json"}}).then(e=>e.json())}}class t{constructor(e){this.id=e.id,this.name=e.name,this.books=e.books,this.genres=e.genres}}class n{constructor(){this.adapter=new e,this.fetchAndLoadGenres(),this.listeners(),this.genres=[],this.baseUrl="http://localhost:3000/genres"}fetchAndLoadGenres(){this.adapter.getGenres().then(e=>{e.forEach(e=>this.genres.push(new t(e)))}).then(()=>{this.renderGenres()})}renderTr(e){return`<tr><td><a href="${this.baseUrl}/${e.id}">${e.name}</a></td>\n      <td><a href="" class="edit" data-id="${e.id}">edit</a>\n         |\n        <a href="" class="delete" data-id="${e.id}">delete</a></td>\n        <td> ${e.books.length} </td>\n      </tr>`}renderGenres(){const e=$("#genres_index_container"),t="<th>Genre</th> <th>Options</th> <th>Number of Books</th>",n=this.genres.sort((e,t)=>e.name>t.name?1:t.name>e.name?-1:0).map(e=>this.renderTr(e)).join("");jQuery.parseHTML(t+n);e.empty(),e.html(t),e.append(n)}listeners(){$("#new_genre").on("submit",this.createNewGenre.bind(this)),$(document).on("click","a.edit:contains('edit')",this.makeEditable.bind(this)),$(document).on("click","a.delete:contains('delete')",this.deleteGenre.bind(this)),$(document).on("click","a:contains('SAVE?')",this.updateGenre.bind(this))}createNewGenre(e){e.preventDefault();const n=$("#genre_name").val();this.adapter.createDBGenre(n).then(e=>{this.genres.push(new t(e)),$("#genre_name").val(""),this.renderGenres()})}makeEditable(e){e.preventDefault();this.genres.sort((e,t)=>e.id-t.id);const t=e.target.parentElement.parentElement.firstElementChild;e.target.innerHTML="SAVE?",t.contentEditable="true",t.classList.add("editable"),e.target.classList.add("save"),t.focus()}updateGenre(){event.preventDefault();const e=event.target.parentElement.parentElement.children[0],n=e.innerText,s=event.target.dataset.id;e.contentEditable="false",e.classList.remove("editable"),event.target.classList.remove("save"),event.target.innerText="edit",this.adapter.updateDBGenre(n,s).then(e=>{this.genres.push(new t(e))})}deleteGenre(){event.preventDefault();const e=event.target.dataset.id;this.adapter.deleteDBGenre(e).then(()=>{this.genres=[],this.fetchAndLoadGenres()})}}new n});