$(document).ready(function(){class t{constructor(){this.baseUrl="http://localhost:3000"}getUserInfo(){const t=parseInt($(".login_status")[0].dataset.current_user);return fetch(`${this.baseUrl}/users/${t}.json`).then(t=>t.json()).then(t=>new e(t))}markAsRead(t){return fetch(`${this.baseUrl}/books/${t}/mark_as_read.json`,{method:"PUT",headers:{"content-type":"application/json"}}).then(t=>console.log(t))}}class e{constructor(t){this.id=t.id,this.username=t.username,this.pagesRead=t.pages_read,this.readBooks=t.my_read_books,this.unreadBooks=t.my_unread_books}}class a{constructor(){this.adapter=new t,this.fetchAndLoadUsers(),this.listeners(),this.baseUrl="http://localhost:3000",this.currentUserId=parseInt($(".login_status")[0].dataset.current_user)}fetchAndLoadUsers(){this.adapter.getUserInfo().then(t=>{this.renderUserProfile(t)})}renderUserProfile(t){this.renderPagesRead(t),this.renderWantToReadTable(t),this.renderHaveReadTable(t)}renderPagesRead(t){const e=$("#page_count_container"),a=`<h3> ${t.pagesRead} pages read so far </h3>`;e.html(a)}renderWantToReadTr(t){const e=`<button type="button" class="mark_as_read" data-book_id="${t.id}">Mark as Read</button>`;return`<tr>\n      <td><a href="${this.baseUrl}/books/${t.id}">${t.title}</a></td>\n      <td><a href="${this.baseUrl}/authors/${t.author_id}">${t.author}</a></td>\n      <td><a href="${this.baseUrl}/genres/${t.genre_id}">${t.genre}</a></td>\n      <td>${t.page_count}</td>\n      <td>${e}</td>\n      </tr>`}renderWantToReadTable(t){const e=$("#want_to_read"),a="<th>Book</th> <th>Author</th> <th>Genre</th> <th>Page Count</th> <th> </th>",r=[];t.unreadBooks.forEach(function(t){r.push(this.renderWantToReadTr(t))}.bind(this));const s=r.join("");e.html(a),e.append(s)}renderHaveReadTr(t){let e,a;return e=""!=t.my_rating?t.my_rating:`<a href="${this.baseUrl}/books/${t.id}">(add rating)</a>`,a=null!=t.my_review?t.my_review.content:`<a href="${this.baseUrl}/books/${t.id}">(add review)</a>`,`<tr>\n      <td><a href="${this.baseUrl}/books/${t.id}">${t.title}</a></td>\n      <td><a href="${this.baseUrl}/authors/${t.author_id}">${t.author}</a></td>\n      <td><a href="${this.baseUrl}/genres/${t.genre_id}">${t.genre}</a></td>\n      <td>${t.page_count}</td>\n      <td>${e}</td>\n      <td>${a}</td> </tr>`}renderHaveReadTable(t){const e=$("#have_read"),a="<th>Book</th> <th>Author</th> <th>Genre</th> <th>Page Count</th><th> My Rating</th> <th>My Review</th>",r=[];t.readBooks.forEach(function(t){r.push(this.renderHaveReadTr(t))}.bind(this));const s=r.join("");e.html(a),e.append(s)}listeners(){$(document).on("click",".mark_as_read",this.markAsRead.bind(this))}markAsRead(t){t.preventDefault;parseInt($(".login_status")[0].dataset.current_user);const e=t.target.dataset.book_id;this.adapter.markAsRead(e),this.fetchAndLoadUsers()}}new a});